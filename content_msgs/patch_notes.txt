Version - name - release date

[1.13.5 - Sevices n' tools - 13/09/25]

clipboard (new standalone file)
Added
* Pinned items section
  * Dedicated “Pins” area rendered above history, not subject to capacity limits.
  * Pin/Unpin action via toolbar, context menu, and Ctrl+P shortcut.
  * “Clear Pins” action (button, context menu, and Ctrl+Shift+Backspace).
* Multi-select operations
  * Copy, Paste, Delete, Move Up/Down all support multiple selections.
  * Aggregated Copy/Paste behavior with newline-joined payloads.
* Drag-and-drop reordering
  * Reorder items by dragging within the same section (Pins or Items).
  * Disabled while a filter is active to avoid index confusion.
* System clipboard watcher
  * Lightweight polling that auto-adds new clipboard text to history while the popup is open.
  * Pause watcher toggle to temporarily stop ingesting new items.
* Live-refresh hook
  * app._clipboard_apply_filter is set while the popup is open and cleared on close, allowing external updates (e.g., from editor copy/cut) to refresh the UI instantly.
* Platform-friendly context menu
  * Right-click, middle-click, and Ctrl+Click (macOS) all open the context menu.
* UI details and controls
  * Selection counter and visible counts (Pins/Items).
  * “Auto-close on paste” option for fast workflows.

Changed/Improved
* Standalone architecture
  * Decoupled from the main window into a dedicated popup, created via your popup builders when available, or via a Toplevel fallback.
  * Transparently adopts global window transparency and other common behaviors.
* Robust indexing
  * View-to-model index mapping for all actions, resilient to duplicate items and active filters.
* History semantics
  * Move-to-front with deduplication for both pinned and unpinned items.
  * Capacity enforcement applies only to unpinned history.
* Filtering
  * Case-insensitive, instant filter across both sections.
  * Safe drag/reorder behavior by disabling reordering under filter conditions.
* UX polish
  * Clear item rendering with truncation for long entries (models store full text).
  * Cross-platform context triggers and consistent key bindings.
  * Status labels update on selection and drag operations for better feedback.
* Integration hygiene
  * Live-refresh hook and watcher lifecycle are cleaned up on window close.
  * Works with app-level builders, styles, and optional alpha without extra configuration.

Fixed
* Duplicate-handling pitfalls
  * Operations no longer rely on raw value matching that could target the wrong duplicate; all actions use exact index mapping.
* Filter-induced reorder bugs
  * Reordering is blocked while filtered to avoid inserting blocks at unexpected positions.
* Clipboard watcher spam
  * Last-seen guard plus dedup ensures new clipboard content doesn’t create redundant entries.
* Context menu discoverability on macOS
  * Ctrl+Click and middle-click support ensures the menu is accessible across devices and trackpads.
* UI update race conditions
  * All UI refreshes are scheduled on the Tk event loop; the live hook and watcher tear down cleanly on close.

Weather tool (new standalone file)
Added
* Standalone weather module and popup window with clear responsibilities and imports/constants located at the top of the file.
* City suggestions dropdown with accent- and case-insensitive matching and deduplicated results.
* Recent/Recommended cities panel with capacity control and stable deduplication across accents and casing.
* Notebook with tabs for Now, Hourly, Daily, and Textual summary, including a dedicated ‘Last city’ view to recall the previous city’s snapshot and quick-restore.
* Responsive Matplotlib charts for hourly and daily forecasts with automatic resize handling and minimum readable sizes for tabs.
* Textual forecast rendering fallback when plotting backends are unavailable.
* Icon rendering via OpenWeather icon codes using PIL (kept as soft-dependency with safe fallbacks).
* Asynchronous fetch pipeline with background thread, UI-safe scheduling, and graceful error dialogs.
* Multi-provider data sources: primary OpenWeather (when API key is available) and automatic fallback to wttr.in; synthetic forecast generation if needed.
* Numeric model normalized to metric units internally with local unit toggling (C/F and m/s vs mph) without re-fetching.
* Copy action for the current summary with optional paste-to-editor integration.
* Utility helpers: city normalization, robust key generation for dedupe, time formatting with timezone offsets (when provided), safe scheduling, and plotting helpers.

Changed/Improved
* Split and refactored the previous monolithic weather logic from the main app into a dedicated drop-in module with snake_case naming and descriptive identifiers.
* All widgets are now stored in variables, ensuring reliable later access for updates, theming, and event handling.
* Suggestions and recents logic rewritten to be accent-insensitive, case-insensitive, and stable against duplicates; history capping is enforced.
* Unified conversion flow: fetches once in metric, then converts to the selected UI units instantly (no extra network calls on unit toggle).
* Forecast normalization strategy to a common, predictable structure; charts and text previews consume the same normalized format.
* Chart rendering is now responsive with debounced resize and minimum size enforcement for reliable readability.
* Error handling hardened across network, image, and plotting code paths with user-friendly messages; fallbacks prefer preserving UI continuity.
* Snapshotting of the previous city for the ‘Last city’ tab, including summary text and a small chart preview (when available).
* Improved code organization: constants, helpers, providers, numeric model, UI, and rendering are separated into sections to aid maintainability and testing.

Fixed
* Duplicate entries in recent and suggested cities caused by inconsistent casing/accents.
* Unit-toggle inconsistencies that previously required another fetch or lost precision across conversions.
* Occasional crashes when plotting widgets were resized rapidly or when plotting backends were missing.
* Intermittent icon load issues due to image resource handling; now preloads and retains references safely.
* Edge cases where forecasts were missing or partial; fallback generation ensures charts and text remain populated.
* Suggestions panel lingering open with no results; it now hides predictably on empty or unmatched queries.
* Potential UI freezes from synchronous network calls; replaced with threaded fetch and safe UI updates.

Knowledge tool - Wiki and Dictionary (new standalone file)
Added
* Dedicated Knowledge popup window with tabbed UI:
  * Search tab for query and options
  * Results tab for article/definition content and actions
  * Images tab (Wiki only) with lazy, incremental loading
* Provider toggle and bridging:
  * Dictionary and Wikipedia providers with one-click bridge actions (Dict → Wiki summary, Wiki → Dict)
  * Keyboard shortcuts: Ctrl+1..4 for Wiki modes, Ctrl+Shift+D/W for bridging, Ctrl+./Ctrl+, for image nav
* Non-blocking networking:
  * Background threads for searches and image downloads
  * Run-id tracking to safely discard stale/out-of-order responses
* Debounced auto-search:
  * Configurable auto-search with minimum character threshold and provider-aware safeguards (never auto in images mode)
* Images pipeline:
  * URL filtering (safe scheme/hosts, raster-only, drop SVG, de-duplication)
  * Parallel downloads with a configurable worker pool
  * Two-stage sizing (coarse clamp on fetch + precise fit to container at paint time)
  * First-ready rendering with responsive navigation controls
  * Image source actions (copy/open URL)
* Robust output actions:
  * Paste to editor (preserving cursor location)
  * Copy all / copy selection
  * Open article in browser / copy article URL (Wiki)
* Status and metrics:
  * Status bar for long-running tasks
  * Result stats (length, non-space chars, lines, paragraphs, sentences)
* Soft preference persistence:
  * Auto-search, auto-pick (Wiki), auto-bridge (Dict), max images per session
* UX polish:
  * Mode feedback, clean whitespace normalization for results
  * Safe URL validation
  * Pre-filling search from editor selection when available

Changed/Improved
* Extracted from the main window into a self-contained, reusable popup module:
  * Cleaner separation of concerns; no UI blocking; better error isolation
* Resilient UI composition:
  * Consistent notebook layout; stable min-sizes per provider; flexible grid/pack usage
  * Better centering and size-change behavior (keeps window centered on resize)
* Safer state transitions:
  * Explicit run lifecycle: start-run, busy state, completion with ready state
  * Always updates UI on the main thread (using after callbacks)
* Wikipedia modes:
  * Summary, Related, Content, Images each with tailored output and actions
  * Auto-pick for Related mode (optional) and disambiguation guidance with tips
* Dictionary mode:
  * Enriched output with grouped definitions; optional synonyms/antonyms
  * Auto-bridge to Wikipedia when no definitions found (optional)
* Images handling:
  * First-success flow automatically brings up the Images tab; avoids blank tab if nothing loads
  * Accurate navigation info (index and original image size when known)
  * Container-aware fitting reduces flicker/overflow and saves memory
* Usability:
  * Debounce tuned to reduce premature network calls while typing
  * Safer, normalized search terms (trimmed, squashed whitespace, length-limited)
  * Keyboard-first usage (Enter to search; shortcuts for modes and nav)
  * Copy/paste integration and clear enabled/disabled button states

Fixed
* Eliminated UI freezes and race conditions by removing blocking calls from the main thread
* Prevented stale result overwrites via run-id guard (e.g., typing fast or switching modes mid-search)
* Resolved images tab edge cases:
  * No auto-switch when no images were found
  * Avoids premature tab switching before the first image is actually ready
  * Properly clamps and converts images to renderable formats (P/RGBA) with graceful fallbacks
* Hardened error handling:
  * Disambiguation errors present choices with tips
  * Network/timeout failures show clear, non-fatal messages and restore ready state
* URL safety checks:
  * Only opens valid, safe http(s) URLs; stricter checks for Wiki actions
* Whitespace and content normalization:
  * Tidier output (no duplicate blank lines, trailing spaces, or platform-specific line issues)
* Consistent state reset:
  * Clears previous results, resets button states, and updates status correctly when re-running searches or changing modes

EgonTE
* Added forwarders to the new standalone tools’ files and replaced the old methods with them.
* Improved method call for the “load_links” method, causing less lag.
* Added methods that ensure the services’ availability and connect them to the methods they are part of.
* Fixed information root’s text-box being blank when trying to view patch notes in “.txt”  file format.
* Fixed class’ call references names in various methods.
* Fixed text-twisters menu’s GUI representation of available shortcuts.
* Fixed variable’s type assignment in the status-bar management method.
* Improved the “saved_settings” method file’s saving process.
* Improved code writing quality for various methods.
* Improved “emoji_detection” conditioning.

Services (new):
ThemeService
* Smarter colors: Automatically picks readable text color against your chosen background.
* Live preview: Try color changes safely and cancel if you don’t like them.
* Presets: Save your favorite theme setups, load them later, or delete them.
* Full app coverage: Applies your palette to editor, menus, toolbars, popups (search, options, etc.) consistently.
* Works with Night Mode: Warns you before changing colors while night mode is active (optional).

SearchService
* Regex searches: Turn on regex to search by patterns (e.g., words, numbers, formats).
* Search within selection: Limit find/replace to just the highlighted text.
* Easy navigation: Jump to next/previous result with clear highlighting of the current match.
* Replace options: Replace one, replace all, or replace only the current match.
* Counts: Quickly see how many matches were found.

FileService
* Reliable open/save: Uses UTF‑8, with fallback for older encodings, and protects against accidental data loss.
* Open last file: Respects your “open last file” setting and restores state safely.
* HTML polish: Automatically prettifies HTML files when opened (when available).
* Print support: One-click print on Windows; opens the file on other systems to print from there.
* Extras:
  * New File creates a clean workspace.
  * Merge files appends multiple files into the editor.
  * Delete file asks for confirmation and clears state properly.
  * File info shows size, type, and timestamps in a simple summary.

ui builders:
Added
* Popup builder features
  * Title derivation from function name with app title prefix.
  * Optional singleton windows per tool; registry-backed.
  * Modal/topmost flags, geometry, resizable hints, app icon, transparency.
  * Theming hook integration (make_tm) and centered placement.
* Tooltip system
  * One-time backend selection (tktooltip preferred, Tix fallback).
  * Shared Tix Balloon instance with configurable delay.
  * Version-tolerant attachment for tktooltip; graceful no-op if none available.
* Rich textbox factory
  * Scrollable text container with HTML rendering when available; safe fallback to Text.
  * Flexible placement (pack/grid), size hints, app-relief/cursor defaults.
* Window management
  * Open-windows controller: duplicate suppression with bring-to-front, stale-window pruning, optional warning on excessive windows.

Changed / Improved
* Owner resolution is robust (root/master/_root/app/default-root) without low-level tk access.
* Key binding system
  * Canonicalizes event patterns (e.g., Control-b -> Control-Key-b).
  * Guarantees bracketed sequences; uses add='+' to preserve existing bindings.
  * Group-based binds with pattern lists and smart fallbacks; prefers binding to the main editor widget.
  * Restores bindings_dict to the expected shape; honors ‘autol’ variable semantics.
  * Adds helpful “initial” one-off bindings when not present (e.g., F5, Alt+F4, Ctrl+Delete, Ctrl+D).
  * Binds editor ‘<>’ to status handler when present.
* Safer UI guards around transient, grab_set, iconphoto, attributes, focus, and geometry.

Fixed
* Duplicate popups and stale registry entries by tracking and pruning open windows reliably.
* Event binding pitfalls: missing brackets, clobbered handlers, and inconsistent normalization.
* Tooltip double-binding and backend collisions (single backend per session).
* Close/cleanup handling to remove entries from app lists and builder registry.
* Owner resolution failures when parent/root are absent (clear error only as last resort).

[1.13.4 - Nifty tools - 6/9/25]
EgonTE
* Usage report
    * Duration source unified
      * Exclusively uses the existing stopwatch state for elapsed time; avoids duplicate local timing logic and alternative trackers
      * Reads start_time and start_date; computes duration with perf_counter for accuracy and consistency
    * Report structure and formatting
      * Clear header with session start, end, and human‑friendly duration
      * Stable ordering for session statistics; safe stringification of values
    * Action analytics
      * Totals and unique action counts from recorded actions
      * Lightweight categorization by first token after the log dash
      * Displays top categories for a quick overview
    * Large‑log handling
      * Truncates detailed action logs after a safe threshold with a clear remainder count
      * Normalizes line breaks within records for single‑line readability
    * Output and portability
      * Creates a dedicated report directory if missing
      * Generates safe, timestamped file names with sanitized characters
      * Writes using UTF‑8 and normalized newlines for portability
    * Resilience and fallbacks
      * Graceful error handling during writes with a partial fallback report path
      * Avoids raising to callers while still surfacing partial data
    * Privacy and transparency
      * Local‑generation privacy note clarifying no transmission of data
    * Return value
      * Returns the absolute path to the generated report for downstream use
    * Project conventions
      * Adheres to snake_case and single quotes; no leading‑underscore helpers; no in‑function imports
* Others
    * Added forwarders for all the standalone files of the improved tools and removed their legacy code (translate, text decorators, transcript)
    * Added a new "Translation" graphic button instead of the ("Translation") drop-down menu's item.

Translation tool (new standalone file)
* Additions
  * Language search fields beneath “From” and “To” with live filtering by display name and ISO code
  * Runtime detection of supported language codes for both backends to validate and auto‑repair user inputs
  * Auto backend preference (“auto”) that chooses the optimal backend at runtime
  * History export to JSON and CSV with clear success/error status messages
  * Modules tab “Reinstall Selected” action (uninstall + install), and live enable/disable of Translate based on availability
  * Clear progress and result statuses, plus hints for the likely source language when auto‑detect is enabled
* Changes/Improvements
  * Backend‑aware language aliasing and normalization
    * Robust handling for he/iw (Hebrew), jv/jw (Javanese), tl/fil (Filipino), zh/zh‑cn/zh‑tw (Chinese), ua/uk (Ukrainian), nb/nn→no (Norwegian), and more
    * Canonicalization for codes returned from backends ensures consistency in the UI and history
  * Translation pipeline
    * Reuses a single translator instance per request; unified chunking strategy; fewer allocations
    * “Auto” prefers deep‑translator when available; falls back to "googletrans" when needed
    * "googletrans" path now attempts multiple service URLs for higher success rates; deep‑translator fallback if all fail
  * UI/UX
    * Debounced translation triggers applied uniformly to typing, selections, and programmatic changes
    * Combobox typing further narrows the current filtered list while search fields persist their filters
    * RTL alignment only reapplies when direction changes to reduce flicker
  * History
    * Efficient trimming based on configurable limit and smoother UI refresh
  * Modules
    * Clearer status/version display; action button text reflects install vs reinstall
* Fixes
  * Backend failures caused by mismatched language codes (e.g., he vs iw, tl vs fil, Chinese variants)
  * Inconsistent normalization of backend‑detected language codes (now canonicalized)
  * Cases where “auto” was inadvertently used as a target language
  * Redundant state updates that led to minor UI stalls or jitter

Text decorators (new standalone file)
* Additions
  * Standalone popup
    * Top controls: Style, Layout, Preview, Options, Tools, Transforms, Outport, Window
    * Main content: Input and Output with dedicated scrollbars
  * Style validation
    * One‑time check for malformed style triples, alphabet/dict mismatches, and glyph height inconsistencies
  * Per‑style glyph cache
    * Normalized, center‑padded fixed rectangles for each glyph; reused across renders for speed and consistency
  * Vertical placement spacing
    * Configurable blank‑row separation between stacked glyphs; integrates with auto‑spacing
  * Combined preview window
    * “Alphabet” and “Chars” tabs with font/size/placement/spacing controls, live status, copy, and save
  * Tools and Transforms
    * Quick actions: use editor text, clear input/output, trim trailing spaces
    * Transforms: reverse chars/words, join, sort, toggle case, insert tab (targeted to Input/Output)
  * Outport actions
    * Insert rendered output to editor, copy to clipboard, or save as .txt
  * Window and layout controls
    * Lock min size, resizable toggle, compact padding, center window, swap tabs, and side‑by‑side editor layout
* Changes/Improvements
  * Rendering pipeline
    * Unified normalization (expand tabs, strip trailing newline, optional case preservation)
    * Robust character key resolution (space, dot, tab, line breaks) with sensible fallbacks
    * Auto‑spacing derived from per‑style rect width; applied consistently to both horizontal and vertical modes
  * Performance
    * Render memoization keyed by (style, placement, text, spacing); fast per‑style rects
    * Debounced live preview with safe scheduling to avoid stacked timers during rapid edits
  * UI behavior and consistency
    * Output wrap setting applied uniformly and mirrored when toggling between stacked and side‑by‑side layouts
    * Live preview respects a “Focus Output after render” option only when Live is off
    * Large‑input guard prompts before expensive renders
    * Tab size edits trigger scheduled re‑render for immediate feedback
  * Preview ergonomics
    * Live status (chars/lines/spacing/placement) and polished copy/save flows
    * Alphabet building favors single‑character keys; the character list is presented clearly per placement
* Fixes
  * Vertical mode reliability: always renders, caches, and returns output; no stale or empty results
  * Spacing safety: defensive clamps for inter‑glyph spacing in both join and stack paths
  * Safe blank‑row generation aligned to glyph rect width; handles edge widths gracefully
  * Glyph edge cases: guards against empty glyph line lists and zero‑width conditions to prevent index errors
  * Event duplication: removed redundant input bindings and duplicate Return handlers to stop double renders
  * Unsupported characters flow: clear ask/auto‑replace‑with‑space path; predictable renders without crashes
  * Layout sync: accurate content and wrap mirroring between stacked and side‑by‑side layouts during switches
  * Debounce correctness: proper cancellation of pending after callbacks to avoid overlapping renders and flicker

OpenAI's API tools (ChatGPT and DALL·E interfaces)
* Additions
  * Unified pop‑up factory integration
    * Uses the app’s popup builder for consistent ownership, singleton behavior, theming, transparency, and logging; falls back gracefully when unavailable
  * Key dialog UX
    * Show/Hide key, Paste, and Clear helpers
    * Inline status bar with progress indicator (separate row, auto‑wrapping)
    * Test Connection button (background validation without closing the dialog)
    * Secret bypass code via the API key field: plain secret from EGON_BYPASS_CODE or SHA‑256 hash in EGON_BYPASS_HASH
    * Legacy Ctrl+Shift+B shortcut preserved
  * Chat experience
    * Sidebar “system prompt” editor with presets (Default/Concise/Detailed/Code) and one‑click Apply
    * Streaming with a Stop button
    * Token count indicator (lightweight approximation)
    * Shortcuts: Enter to send; Ctrl+1/2/3 for style presets
  * DALL·E experience
    * Multi‑view modes: Split, Gallery, Viewer‑only, List‑only; quick switch with Alt+1/2/3/4; view mode persisted across sessions
    * Inline viewer (when Pillow is installed) with zoom in/out, fit‑to‑screen, and Ctrl+Mouse wheel zoom
    * Thumbnail grid with lazy loading and click‑to‑open source
    * Right‑click actions on outputs (Copy selection, Open selection)
  * Utilities
    * Helpers for copying/opening selected URLs, downloading or copying images, decoding base64 images to temp files, fetching image bytes, and opening folders/files cross‑platform
* Changes/Improvements
  * Key dialog
    * Single provider‑aware dialog (OpenAI/Azure) with dynamic fields (endpoint and deployment shown only for Azure)
    * Status/progress now lives in a dedicated row; error text wraps for readability
    * Provider selection is remembered (the last mode persisted on the app)
    * Safer lifecycle management: buttons, status, and progress changes are guarded when the dialog closes mid‑operation
  * Chat UI
    * More modern look and behavior; simulated responses honored in bypass mode for fast UI testing
    * Conversation trimming keeps only recent history and preserves at most one system message to control growth
    * Cleaner threading and UI‑post patterns; all UI updates safely scheduled
  * DALL·E UI
    * Clear header settings (model/prompt/size/count/quality)
    * Action bar separated from status to enhance readability; progress is indeterminate and unobtrusive
    * Output list is read‑only by default; double‑click and context menu make it easy to act on results
    * Viewer area made scrollable and centered; zoom preserves quality with proper resampling
    * Smooth scrolling for thumbnails and the viewer is supported
  * Consistency and resilience
    * Everywhere: consistent snake_case, single‑quoted strings, and cohesive theming
    * Centralized fallbacks ensure features degrade gracefully when optional dependencies are missing (e.g., Pillow, tooltip lib)
    * Keyboard and mouse interactions are standardized across dialogs
* Fixes
  * Key dialog crash after bypass/close: guarded status/progress updates and background‑thread callbacks to avoid TclError when the dialog is destroyed
  * Legacy name mismatch: compatibility shim so calls referencing on_service_change() continue to work
  * UI race conditions: background workers now check the window still exists before posting UI updates or starting asynchronous flows
  * Robust error surfacing: errors during connect/test/image generation are rendered to the status line (with wrapping) instead of raising or overlapping UI controls
  * Output interactions: resolved context menu and selection behaviors in output lists; read‑only mode enforced to prevent accidental edits

Transcription tool (new standalone file)
* Additions
  * Dedicated pop‑up entry point open_transcript(app) with complete transcript workflow
  * Busy modal and background execution runner (run_async) with optional cancel support for long tasks
  * YouTube transcript language selection, including graceful fallback to translated tracks when native captions are unavailable
  * Local audio segmentation mode with configurable segment length for large files
  * Large‑file prompt for local transcription to set user expectations on processing time
  * Privacy controls: redaction of emails, long numeric sequences, and token‑like secrets; confirmation dialog before copying/saving unredacted content
  * Export suite: TXT (with optional inline timestamps), SRT, VTT, Markdown, HTML, JSON, CSV, and DOCX; YouTube timestamp links export
  * Result windows for text and captions, including format selection for insertion and timestamp toggle
  * Keyboard shortcuts: copy/save/escape in result windows; Return to trigger YouTube fetch when valid
  * Tooltips for all action buttons and controls
  * Guardrails for DOCX export availability and for preventing writes when buffers are empty
  * Consistent widget variable bindings so all widgets are retained and can be reconfigured safely
* Changes/Improvements
  * Unified and enforced project style: snake_case, descriptive identifiers, single‑quoted strings, and imports only at module top‑level
  * Refactored to use app‑level UI builder functions (app.make_pop_ups_window, app.make_rich_textbox, app.place_toolt) for consistent behavior and theming
  * Robust retries with exponential backoff for YouTube fetch and speech recognition calls to handle transient failures
  * Safer YouTube URL/ID normalization and validation to handle common link shapes and extraneous parameters
  * Caption normalization: safe default duration inference, whitespace collapsing, and optional removal of bracketed tags for cleaner output
  * SRT/VTT correctness: reliable "hh:mm:ss,ms" and "hh:mm:ss.ms" formatting with line wrapping and sensible line limits for readability
  * CSV export now preserves numeric precision and applies redaction selectively to text fields
  * Editor insertion modes consolidated (replace selection, insert at cursor, append to end) with stable focus/scroll behavior
  * Clearer UX: status feedback in the YouTube section, disabled/enabled fetch button based on validation, and consistent notifications for success/error
  * Resource lifecycle: temporary files cleaned up after processing; UI elements re‑enabled and busy popups closed in all paths
  * Segment‑based transcription pipeline tuned for responsiveness and stability on long audio
* Fixes
  * Prevented crashes when optional libraries are unavailable (YouTube API, pydub/ffmpeg, speech_recognition, python‑docx) with user‑facing guidance
  * Resolved potential empty‑save issues by validating DOCX byte buffers before writing files
  * Avoided Tk state errors by defensively toggling widget states and verifying existence before updates/binds
  * Eliminated silent failures during clipboard/editor operations by handling missing editor selection/cursor gracefully
  * Addressed potential GC‑related widget issues by keeping references for all created widgets and resources
  * Ensured temporary WAV files produced from MP3 conversion are always removed on completion, error, or cancellation
  * Hardened error surfaces with consistent, contextual message boxes and safe fallbacks across the UI and I/O boundaries


[ 13.3.3 - Tools & fixes - 30/8/25 ]

EgonTE:
* organized the unconditional imports.
* Fixed libraries’ installer forwarder bugs in the EgonTE.
* Moved Tesseract installation and conditions from the init method to a dedicated method. This prevents errors and speeds up program startup.
* Moved Text-box widget creation out of the init method. Used the specialized “create_rich_textbox” for this purpose.
* Moved the “opening message” functionality out of the init method. This avoids slowing down overall program initialization, especially due to possible API requests.
* Moved some initial calls of methods in the “init” method into a new method to make them faster and safer.
* Removed some “randomness” tools’ menus and tools because they all merged into one pop-up (window) tool (which is a standalone file) in the new version.
* Made the “stopwatch” method more durable, and improved the restart functionality to prevent errors
* Added a calculator and a Python version guard forwarders.
* Fixed some issues regarding the drop-down menus creation.

Randomness tools file (new):
* Numbers tab: clarity, control, and previews
  * Added spinners for lower/upper bounds and float decimals.
  * Split actions into Re-roll vs Insert, with visible preview values.
  * Input validation for ranges and decimals.
  * Enter inserts the current int; no silent re-rolls.
* Names tab: safe optional dependency
  * Graceful handling when the names library isn’t available.
  * Re-roll, Insert, Copy actions with gender/type options.
* Colors tab: display and palette tools
  * Live preview for HEX/RGB/HSL; uppercase and hash toggles.
  * Palette generation (complementary, triadic, analogous, monochrome).
  * Copy single color or palette as CSS variables.
  * Inline swatch canvas with resize handling.
* Lists tab: essential list operations
  * Choice, sample (k, no replacement), and shuffle.
  * Input parsing from lines/commas/semicolons.
  * Clear errors and result insertion.
* Sequence tab: redesigned for inline preview
  * Removed the ‘open with preview’ toggle; added an embedded preview text box.
  * Length spinner; options for lowercase/uppercase/digits/symbols or custom charset.
  * Generate, Insert, Copy, Clear actions.
  * Insert at caret or end; lag confirmation for very large lengths.
  * Clean, simple UX without extra windows; consistent with the rest of the tool.
* Dates and times tab: feature-complete generator
  * Start/end date inputs, include-time toggle, and format presets.
  * Today + N quick range support.
  * Re-roll, Insert, Copy, and format validation.
* Key bindings and interaction polish
  * Enter triggers the most relevant action based on the active tab.
  * Escape closes the tool.
  * Safe binding via app.binds when available; robust fallbacks otherwise.
* Tooltips and scaling
  * Tooltips attached to the correct, current widgets (no stale references).
  * Best-effort DPI scaling hooks for better readability.
* Reliability and safety improvements
  * Consistent RNG abstraction with fallbacks (project RNG → stdlib).
  * Defensive try/except around UI operations to avoid user disruption.
  * Clear, actionable error messages.
  * Insert helpers that respect caret placement when available.

Calculator tool file (new):
* Evaluation and safety
  * Comprehensive error handling (ZeroDivisionError, NumExprError, generic exceptions) with clear messages.
  * Input validation: length cap, allowed-character/name checks, and balanced parentheses detection.
  * Constants and math features: pi and e support; optional degrees mode for sin/cos/tan.
  * Debounced auto-calc with a toggle to enable/disable.
* UI behavior
  * Kept familiar full layout: entry, “Calculate,” last expression, operator panel toggle, keypad toggle, and tutorial link.
  * Safer deletion in the input (selection-aware; caret-safe).
  * Operator buttons reworked with explicit tokens and correct labels.
* History
  * Persistent history of (expression, result).
  * Preview expression on select; compute via Enter or double-click.
  * Context menu for Reuse, Compute, Copy (expr/result/both), Insert “expr = result,” and cleanup actions.
  * Up/Down navigation in the entry recalls prior expressions.
* Editor connectivity (self.EgonTE)
  * Smart insertion:
    * Insert result at caret.
    * Replace selection with result (automatic when selection exists).
    * Insert “expr = result.”
  * Insert options:
    * Trailing space and newline toggles.
    * Insert button right-click menu to choose insert mode and whitespace/newline.
  * History actions and middle-click can insert results directly into the editor.
* Keyboard shortcuts
  * Enter to calculate; Escape to close; Backspace with safe delete.
  * Ctrl+I insert result; Ctrl+Shift+I replace selection with result; Ctrl+E insert “expr = result.”
  * Up/Down to cycle history in the entry.

Library installer UI:
* The new installer is more reliable, more consistent with the rest of the program, safer to close/cancel, easier to theme and position, and clearer about what it restarts—while preserving the simple, determinate progress UX

Version guard (new):
* Defines a supported Python range: default is 3.10.x (RECOMMENDED=(3,10), MAX_EXCLUSIVE=(3,11)).
* Checks the current interpreter (sys.version_info) with version_in_range.
* If version is supported, returns True and does nothing else.
* If not supported, it:
  * Tries to show a small Tk dialog:
    * Yes = Continue anyway → returns True
    * No = Opens the provided download_url in a browser → returns False
    * Cancel = Exit → returns False
  * If Tk isn’t available (headless), it prints a helpful message to stderr and returns allow_continue (True by default).

Libraries checkup:
* Added all the possible libraries to the “required.txt” and “required_optional.txt”.
* Added all the possible libraries to the lists that the library installer uses in “large_variables.py”
* Altered the imports section order in the main program (”EgonTE.py”).

[ 1.13.2 - Tools revolution 2 - 23/8/25 (Summery) ]
OpenAI interfaces (ChatGPT and Dall-E):
* Everything is moved into a single standalone module: ai_popups.py.
* No UI freezes, safer threading, and proper streaming.
* Cleaner, more discoverable controls, and faster iteration with bypass mode.
* Consistent with enhanced popup builders and modernized across both ChatGPT and Dall-E.

Natural language processor:
* Same feature set, but faster and more reliable.
* One function to open the tool, fewer moving parts.
* Better error handling and time/size safety.
* Consistent UI with standard popup builders and improved naming for maintainability.

Email tool:
email tool but modernized: safer connection, better validation, CC/BCC, attachments, body stats, saved fields, a login test, and friendlier UI—all wrapped in a standalone file with a one-line forwarder for easy access.

Auto-lists (no standalone file):
* No thread, no scanning the entire buffer; logic is local to the current line at the caret.
* Reliable Tk indices and correct event signature (handler receives event and returns 'break' when handled).
* Flexible marker support with clear rules; simple to extend.
* Clean on/off via self.aul without duplicating bindings.

[ 1.13.1 - Tools revolution - 16/8/25 (Summery) ]
Git tool:
The tool is safer (secret/size checks, allowlists, confirmations), more reliable (validation and guarded GitPython usage), more responsive (threading for long tasks), and cleaner (modular and easier to maintain), while keeping the familiar UI and workflow.
Encryption tool:
A faster, more robust encryption/decryption pop-up that:
Doesn’t freeze under RSA workloads.
Produces clean, portable results.
Has a consistent look-and-feel and better usability.
Offers full local clipboard controls (copy/cut/paste/select all) in the tool itself.
Maintains compatibility with existing code by preserving public member names.
Web scraping tool:
The tool is safer (legal and technical), clearer (initial window), more robust (validation, scoping, and limits), and easier to extend (IDs and hooks). It provides a cleaner UI/UX with organized tabs and a single output area that reports results and HTTP status succinctly.
Find and replace tool (detailed & summarized):
Moved into a new file ("EgonTE.py" to find_replace_popup.py").
Replaced many `Tk` widgets with `ttk`.
File template generator:
Descriptive names and structured helpers.
Themed controls, keyboard shortcuts, and better messaging.
Stronger validation and safer file handling.
Transcript tool (no new standalone file):
The method is safer (no destructive file operations), clearer (better names/structure), and more user-friendly (interactive selection window).
YouTube input is integrated into the selection window.
Overall reliability improved through dedicated error handling paths and resource cleanup.
Other additions:
Fixed and improved some threading to make the program smoother and stable (including "stopwatch" and "check version" threads ).

[ 1.13 - The next level - 9/8/25  (major changes only) ]

Added:
Added a new "ui_builders" file that stores many crucial methods like "make_pop_ups_window" and brings them to the next level, and there's new methods there.
Remade the "library installer" tool with a new UI and many advanced functionalities to ensure a safe and smooth experience.
Added a new "handwriting_popup.py", which stores the handwriting method, which also got many additions, improvements, and bug fixes.
Added an "HTML" version to the informative content (help and patch notes) that activates if the conditions are right.
Added a file template generator tool, which generates simple yet nifty docs and PDF (and more) files.
Added "clipboard history" tool, which allows you to check on your clipboard, play with its content, and has connectivity to the main window.
Added many algorithms to the main file to improve reliability and make the code more readable.
Added an "auto-lists" method that can help with making numbered or bulleted lists (and more) in the text box.
Added a special version of the edit (drop-down) menu as a right-click menu.
Added a massive find & replace text method, with a lot of features and in real time events.
Added a method that loads all the commands of the app.
Added "large_variables" file, that stores large variables that contain mainly  autonomous or string variables.
Added "universal_functions" file that stores all the the standalone functions that are also static.
Added many options in the "advanced options" window.

Improved / fixed:
Naming improvements all across the project.
Improved and fixed the "speech to method" to an high degree.
Fixed and improved the "typefaces" method.
Fixed and optimaized a lot of stuff.

[1.12.6 - rise of windows - 9/3/24]

Added:
Added side windows advanced settings:
1. open at the middle of the screen
2. cancel the limitation of window sizes
3. transparency
4. top most
5. window count warning
6. text corrector changes (moved from functional)
Added night mode for these tools:
1. search functions
2. record
3. insert images
Added the ability to make a report usage file (saved setting) right after closing the program, the file will contain:
1. usage time
2. the date and time of the beginning and the end
3. the record tool content
Added some functions to the record window:
1. save the records as a file
2. copy the record to the clipboard
3. paste the records to ETE
Added a function that checks if you're using the latest version (saved setting)
added a function that manages some of the opened windows:
gives warning if too many windows are opened (can be disabled with saved setting)
if you try to open a tool window that is already opened it will make the window show up instead (can be disabled with a saved setting)
remade the insert image function:
(can manage more than one image at a time.)
1. manage a bunch of images and be aware of their current state
2. can point you to their index
3. can add/remove a specific image
4. can rename an image but only inside the program
5. can remove all of them with a press of a button
added more docstrings

Improved / Changed:
Improved record call -  if the window is opened instead of opening another one it will make the current running window appear in front of you
Improved the connection between the advanced options and saved settings by combining all the saved settings - save functions in the advanced settings into one
made the restore defaults and the creation of a new saved settings file have a middle-ground function to save up lines of code
changed the corrector preview place in the advanced settings to the new "pop-ups" tab
changed some textual names - fixed misspellings, made some names fit their purpose
made more use of the general pop-up window title structure
removed many useless print statements + improved some
made the unbinding of the event of the "save by writing" function objective to the function
improved Wikipedia's image tool conditions
made weather tool city name capitalized
made the record tool run via a specialized thread's function - won't duplicate
improved some placing of windows widgets that now don't have to be limited by their size
improved the compare file window UI

Fixed:
fixed that the record list was resetting in some occurrences
fixed a bug that the file info function will try to proceed even when it doesn't have a file
fixed some repo's function conditions
fixed some search function modes
fixed inconsistency in some advanced settings night mode colors
fixed RuntimeError - with the download of "FFmpeg"
fixed that Wikipedia's tool images function wasn't getting many images because of the bytes conversion
fixed some bugs with the program's  main loop
fixed the call of git commands


[ 1.12.5 - getting ready for the Microsoft store ]

Added:
added fun numbers saved settings - determines if random numbers will be inserted into text entries (that is useful for them) when opening these tools
added search functions tool - search function by menus, name and run them from this tool
added advanced options to the custom color functions
added restart function to the main program's window
added options more options to the "generate sequence" tool:
insert at the text's pointer / at the end of the text
preview window where you can choose whether to insert the content or dismiss it
added binding settings in the advanced options window -
right now you can choose to enable or disable the following shortcut categories:
file-related common shortcuts
typefaces shortcuts
edit function (like goto and replace)
text twisters shortcuts
window actions shortcuts
added a "topmost" shortcut

Improved:
improved to the tooltip with a custom library - now it looks modern, has a constant delay before showing up and the tooltip will follow the mouse on the widget's borders
the new tooltip can be adjusted to night mode - for now only if the program opens in night mode
made that for window 11 (and maybe 10), when night mode is activated the title bar will also turn black, and vice versa
combined all typeface functions
improved some menus' names of functions
changed the calculator calculating method from eval() to numexpr.evaluate() - safer and provides many more calculating options, and added a button with a link to a tutorial about this library
changed the number that will warn you about lag in the generate sequence tool from 25k to 20k
changed the mention of what tool you are using in the knowledge window (Wikipedia or dictionary) from the enter button to the title bar
changed "HTTP" links to "HTTPS" for security reasons
made the encryption root 5% transparent like the other tools' windows
improved info window's night/light modes by giving the highlight of text search foreground and background depending on the mode
made the declaration of some night mode variables conditional to make them less wasteful
replaced some wasteful buttons commands' configures methods with a placing of the function that can prevent that
improved "insert random number" UI, by placing the widgets in a different way that made the window less wide and unorganized
improved the "generate sequence" UI, by using more modern UI elements, and making the design more consistent
improved very lightly the knowledge window's UI
improved the "encryption/decryption" tool's UI by giving the buttons more space and making them look more modern
changed some cities in the  "known cities" list in the weather tool to more known ones
improved email tool by making the send email window unresizable, and adding to the custom text box scrollbar and more parameters that make it richer

Fixed:
fixed a bug that made half of the dictionary's tool UI elements wasn't placed
fixed variable scope error in the info window
fixed polyglot name in the library installer
fixed emoticon library name in the import
fixed the bug in the info root's night mode that the occurrences label even without output will show its color
fixed custom_ui_colors night mode condition
fixed the errors of the "known cities" list in the weather tool

[ 1.12.4 - improvements along the way]
Added:
added a restart button to the library installer after you finish installing the libraries
added bonus installations of upgrade pip and the optional libraries
added an encryption/decryption tool with symmetric and asymmetric methods
added night mode support to the "advance settings" window
added night mode support to the handwriting tool
added function that can change the text file's type, with the option to delete the version with the previous extension
added an insert image function with a specific deletion option
added to the find text tool, this navigation functions: tag/untag all matches
added a setting to find text tool about giving the focus to the result every search
added an interactive list that shows all the most popular words in the find text tool
added an extra calculator U.I. to the calculator tool, number, expression, and clear buttons
added another characters mode in the virtual keyboard that focuses on symbols
made an external commands menu that contains the GitHub and Discord links, and soon, the M.S. stores one
added support for Azure's OpenAI keys
added a preview changes window (saved) option to the text corrector tool

Improved:
made Wikipedia tool -> images method to show images with image viewer instead of links' text (that supports links function when pressing an image)
changed "open_status_name" to a class variable
made the find text tool have an interactive text entry
combined the find text tool search and result windows
improved the text split for words search in the find text tool
made the occurrences count display a label that updates in real time instead of a message box
made the A.I. tools support the new OpenAI library
Improved the ChatGPT tool U.I. and made it function more like a chat
Improved the writing of patch_notes.txt and help.txt a lot
extended help.txt writing
made the email and links shortener tools' libraries from a requirement to an optional installation
added night mode support for the info root search functions and improved the existing night mode for the window
improved delete file function and added support for functions' files' custom deletion
changed the GitHub link function to the external links function
improved the transcript function output / U.I. and chain of events
improved many functions/variables names
improved knowledge window - a searched term not found error handle by inserting the closest match to the text's entry

Fixed:
fixed the import of "youtube_transcript_api"
fixed possible night mode activation / variable bugs by making the variable consistent with Tkinter's "BooleanVar"
fixed "clac" misspelling (to "calc")
made the code more consistent by replacing double-quotes with single-quotes
fixed a variable bug in the "emoji detection" function
fixed a variable bug in the file's name when you exit the program
fixed that night mode wasn't initially activated if the user set in the options
removed unexisting dallE output size
fixed auto-save option wasn't saving in the options file

[ 1.12.3 - the big patch of support - 27/11/23 ]
Added/remade:
Made the option to auto-save via writing, you can choose this method of auto-saving via advanced options.
Added support for more languages in the speech-to-text function:
English (U.S.), English (U.K.), Spanish (Spain), French, Russian, Arabic (Egypt),
Japanese, Italian, Korean, Indonesian, and Hebrew.
Unique scroll bars were added to the text decorators depending on whether it was set to vertical or horizontal.
Added that the advanced options are from now on divided into two tabs: styles, and functional.
Added a decent find tool to the information window with many functions:
scroll down by matching terms, resetting, highlighting/lowlighting all, number of occurrences, and reactive text box.
Semi-remake the translate tool:
have an output box (not automatically paste to E.T.E. anymore),
a new U.I. - 2 sides, one input and one output - combobox and buttons organized for that purpose as well,
and replaced the copy (to clipboard) tool with paste to E.T.E. tool,
and also a random output language when you start the tool.

Changed/improved:
Improved the installation of "fast_autocomplete" via the library installer.
Made that the transparency scale changes as you move it and without a specified "set" button.
Improved exit app conditions about unsaved changes and about quitting the program.
The copy function was improved by updating the program values.
Improved the find_text (primary find tool) variable usage.
The placement of widgets on the information window was improved.
Improved the documentation of the advanced options.
Made some text decorators' symbols more unique.
Added that if a required library isn't installed it will print which one.
Added more messages to the record function.
Improved by detecting the main text box's tags.
Improved advanced option by adding that if you try to open it while it is already open,
it will show/place the window in front of you.
Extended help.txt file.

Fixed:
Fixed that when the program asked the user to try installing again, it called the import function instead.
Fixed the global libraries issues by eliminating the import_req function.
Fixed the misspelling "warp" to "wrap".
Fixed the bug in the horizontal mode in the text decorator, which was getting mixed up after it filled the text box.
Fixed the vertical text box input on the text decorators, which was accidentally case-sensitive.
Fixed the many input lags that the text decorator had, with threads.
Fixed the asterisk (text decorator) space bugs.
Fixed that the requests library got treated like a built-in Python library.
Caught the error that can be made when you use the library installer without sys installed (it will not work for everyone).
Fixed the type error with sys at the library installer.
Fixed that if there was a failed installation of a library, the program didn't skip to the next one.
Removed Ctypes from the libraries' installation list.
Fixed the command that is used to install the libraries.
Fixed a bug that made the "save by time" function work while the auto-save option was disabled.

[ 1.12.2 - absolute 1.12 part 2 - 18/11/23 ]
improved:
improved accuracy of file type detection in many cases
improved hide advanced settings' conditions
changed emoji detection's activation method from keys' release to keys' press
made the usage time function more precise
made the opening messages a bit more efficient
made all (windows') titles / and many message boxes titles follow the general titles' structure
improved a library (py-tesseract) setup condition
improved writing of some small things
made that the handwriting function conversion function work and improved some variables and the output box
changed handwriting size shortcut binding from the whole window to the canvas
improved screenshot function to allow it to capture only the text box/canvas
improved the management of U.I. events in the dictionary and Wikipedia tools
improved the organization of the output in Wikipedia's related articles option
Improved Wikipedia and dictionary tools paste function by using the displayed content (instead of searching)
added a print statement that writes all the libraries that the library installer has gone through

Fixed:
made git menu work with night mode
fixed a bug in the status bars variable
fixed the scope of some functions that were off (not many)
fixed some saved settings variables bugs
fixed some inaccuracies in the buttons' tooltips
fixed some handwriting's convert function type errors
fixed the problem that the command to install libraries wasn't there

Removed:
removed my old discords usernames
removed unused loading screen function


[ 1.12.1 - absolute 1.12 part 1 - 19/10/23 ]
added:
added many functions using git - need to activate dev mode and have the "GitPython" library
added the option to use text decorators to output the result vertically
added text twisters new (saved) option - remove space & newline from some text twisters functions
added that if the saved settings file isn't working, the program will ask you for permission to close and reset the file

Improved:
windows placement:
information window will always appear in the middle of the app
the virtual keyboard will appear in the middle bottom of the app

libraries installer & imports:
improved library installer with messages and thread for the download
improved the dispersion of the imports
improved the condition of starting the program - if the required libraries aren't installed instead of error, you can
decide if you want to open it again

Other functions:
optimized a little the close function
improved go-to function by setting the focus on the text to the main text box instead of what it will remain where
it was before - making the function useful
improved the text decorators' tool U.I. - and made support for adjustable window size
improved the sync of the (primary) options menu with the advanced settings and a bit with the saved ones highly
improve file compression a little bit - U.I. & error handling

Writing:
expended the help file content and fixed some misspellings
improved most of the comment writing

fixed\changed:
fixed that the library installer's widgets weren't placed
fixed a bug that the text decorators result was placed on one another instead of replacing the last one
fixed misspelling in the calc tool
fixed that the shortcuts of the DTT tool about the size weren't synched
fixed that some settings that were meant to save didn't save in many instances
changed the default DTT size shortcuts from many keys to the mouse wheel
changed the default folder that the file explorer will give you when selecting a file in the main folder instead of
E.T.E.'s folder for this functions: open file(s), merge files

[ 1.12 - rebirth - 29/8/23]

Added:
added titles to all big versions
added tooltips to the "virtual keyboard" and "draw to text" buttons
made that if night mode is on and you are trying to use custom colors, the program will ask you if you want to change the U.I.'s colors anyway
added that you can apply custom colors on the information window and on the virtual keyboard's window
added night mode support for the virtual keyboard window as well
added IDE functionality when you are using a Python file - compile & view the console, some settings, and more...
added a feature that if you haven't had all required libraries installed, a window will pop up and give you the option
to install all the required libraries automatically
added dates of versions in the patch notes
added a second night mode that focuses on blue - you can choose the one you want with the advanced options window
added to draw to text tool line & eraser thickness options
made saved settings work
added a new mode for the virtual keyboard: symbols & numbers; also made the keyboard more dynamic to switching the different modes
added a new window function
added open last file setting - the ability to instantly open the last file you used in your previous session when you open the program again
Night mode on the supported pop-up windows can now work initially
added a calc menu button drawn button (and removed the menu button)
also added a caps mode for the virtual keyboard - change between capital and small letters
added the translator and list of Roman numbers to the symbols translator (emoticons hub)
added some short examples and explanations for some subjects of web scrapping in the web scrapping tool
added an option to make the program use your GPU for some tasks - for now, it is for the N.L.P. function alone
remade the entire weather pre-window and added a random (known) city option
Web scrapping now supports using the content that is in the main window of the text editor itself and also updating it as you write more
added insert & copy buttons for the calculator tool instead of automatic insert and added a new result label instead
of just equation entry
added 2 new N.L.P. features - phone numbers & names
added restore default settings feature As part of the saved settings feature
web scrapping tool now should support XML as well via the internet option
In the handwriting tool, you can now change the size of the pencil/eraser
added extras window for handwriting tool that has some additional information and settings about more cords mode and
different shortcut

Changed/improved:
improved the email tool by adding more default options, fixing bugs, etc.
improved the record window by adding more messages
made the upload of an image to the handwriting tool always be in the middle no matter how you changed the window cords -
(Previously, it was only the middle of the initial window size)
Combined some custom color functions
improved the condition of certain optional libraries
changed the (black) night mode's button background color to one that suits the buttons better than the previous one
Change all the (tools) icons to original ones and added one for draw-to-text tools
optimized night mode function - made that only some variables are inside the conditions instead of everything
The OpenAI image (from the link) now works and is functioning as the ChatGPT tool icon
made the exit function a little bit more optimized
improved the generate tool U.I. by setting Its title's font to the program standard
changed the search tool's title - to make it more general and precise
improved advanced options U.I. by making the distant radio & check buttons more centered
remade the placements on the virtual keyboard - everything is in place, and there are no random spaces
emoticons hub has a new name - symbols translator
improved design for symbols translator (emoticons hub)
Symbols translator (emoticons hub) moved from the settings menu to the tools menu
symbols translator (emoticons hub) list of ... improved by adding a mode for a second display of characters - used now
only for popular combinations of Roman numbers
made the web scrapping tool U.I. more straightforward by making the method that the user used to import the content noticeable in -
the button
improved web scrapping warning about using it on websites
changed initial virtual keyboard mode to lowercase characters instead of uppercase
optimized opening message - if the opening message is not from an API, the program will open much faster and a bit faster
If it is indeed from an API
The uploads function within the web scrapping tool is now combined - making the tool more consistent and supporting the
features of both worlds in every situation
The N.L.P. results U.I. is better with a font, a text box/tree view, a scrollbar, a unique copy function, and more
The N.L.P. function, instead of throwing an error at you when you don't have the package, will first try to install the package -
with a very effective way
changed to some variables names to make them more clear
calculator improved U.I. - better placing, better title, new label
improved the conditions that decide if you can use the Chatgpt tool
Many tools now have a default message where no content is generated
Web scrapping will write long website links in 2 lines in the "quick information" section
improved the screenshot function by making the desired window topmost when taking the screenshot
extended help's text file content


Fixed:
Fixed a bug that when you fail to pick a file to open, the content you had before was gone
Fixed a bug that made the program produce an error because the night mode didn't know when the info pages were closed -
after you opened them at least one time
fixed a bug that the program didn't know, then the record window was closed after being opened initially
Fixed a bug that after displaying the toolbar again after hiding it, it will appear at the bottom of the text box
Fixed a bug that made the Record menu duplicate when turning special tools on again after activating dev mode
Fixed the content's stats connected words bug
partly fixed the usage time bug when it updated the value before the widget was created
Fixed calculator bug when items outside the frame continue to be generated every time you press the 'show operators' button
Fixed the virtual keyboard button not changing colors when needed
Fixed a bug that broke the web scrapping tool - you could open it without selecting anything in the pre\inital window
fixed that in the weather tool, the city name was connected through + instead of whitespace
Fixed a bug that was changing the index of the font size shortcuts beyond the maximum/minimum
Fixed the web scrapping bug that didn't allow to actually switch the received content mode (all \ text \ attributes)
Fixed content's stats error with a condition


[ 1.11.2 - Emoji evolution and more - 29/4/23 ]

Emojis & Emojis-like:
automatic emoji detector - with the option to deactivate it
changed the many options menu commands of emojis to one window interface
added emoticons & Morse code detection - from/to
new emoji detection languages support for Spanish, Portuguese, Italian, French, German, Farsi/Persian
added random emojis/Morse code
added list of Morse - an interface that outputs a dictionary; Unicode letters and their meaning in Morse code
emoji bug fix - the bug that after the emoji is inputted, the program will generate a lot of symbols.
emoji bug fix - the precise of the function got better to detect emojis
emoji bug fix - fixed most (up to all) of the things that caused the cursor to move to unwanted positions after emoji detection

Text twisters:
text twisters update: work with highlight as well.

Record & (menu) Modes:
record - the big events of the app since the opening will be added to a list that can be accessed in a text box in a new menu
modes - a simple solution to not make the program overloaded with too much stuff:
dev mode - the dev mode controls the Record cascade
special tools - controls the tools cascade and colors+ cascade

Others:
extended help content.
made that the bold font on the tool menu will be instead of the A.I. tools on the most original & good ones! - also
made the font size smaller to match the other sizes of the menus.
fixed some names
fixed: colors+ -> app colors -> frame colors bug -  the right of the bottom of the program wasn't changing color
fixed & improved: fixed content's stats bug that a newline word was connected to the last word before her,
and with that knowledge, I also made that word split is based on some symbols and not just whitespace
fixed: "sort by characters" whitespaces and newline bug
fixed: "reverse characters" newline being at the first index
made some of the repetitive things consistent - tools' titles & fonts, etc.

[ 1.11.1 - Content & file stats - 8/4/23 ]

New content statistics:
Have a bar chart showing the count/frequency of the top 8 most used words & all the alphabet characters
count of words, characters, alphabetic characters, symbols, lines, and paragraphs
number of rations: words per line, characters per words, lines per paragraphs
number of differences: different Words \ characters

Upgraded the file information function:
added the accession time
added the owner's name
changed the font of the tool's U.I.
changed the error message to a file opening menu

Small changes:
made the opening file function smoother - the last content will be deleted (and eventually replaced) only after you're opening a file
made the opening of new blank files a little smoother by doing the same thing

[ 1.11 - EgonTE redemption - 1/4/23 ]

Added:
added reader mode
added emoji list
made that if you change the font, the font size won't be affected
added a file information function
added autosave functionality every minute
added compression function between two files
added a tool that can correct the misspelling
added a message box for errors about unsupported characters
added a way to import 'special' files by internet link
added local file import supports now PDF as well
added when opening HTML files, they will be 'prettier' right away
added web scrapping tool -  with class, tag & text options - Early Access
added error handling for lost internet connection
added natural language processor with many functions: Get nouns, Get verbs, Get adjectives, Get adverbs,
Get pronouns, get stop words, Entity recognition, Dependency tree, Lemmatization, Most common words
added the ability to turn handwriting to text - via canvas, uploaded image
added text decorators to turn regular text into decorated (huge) text - 4 options
added organized patch notes in the program itself
added usage time of the program in the advanced options window
added the option to switch capital letters to regular in the virtual keyboard
made the exit function more effective
added night mode on help/patch notes
added a connection to quotes API: quotes function  & chance for one when opening the program
added file comparison function
added an option to delete the file you are using
added support for printing a file with O.S. that isn't Windows
added a weather tool
added a fullscreen option by pressing F-11
added a "topmost" option - makes the main window always on top
added the new Wikipedia settings; now, instead of just getting a summary, you can choose from - content, images links, related articles names
added a function that can send emails (supports only Gmail, can't work with accounts that have 2fa)
added a function that allows merging files in a more flexible way
added YouTube transcript API (W.I.P.) and also added a local transcript function
added a screenshot function - screenshot the app window directly
a handwriting function: draw characters and let the program identify them! (convert to text mechanism is still experimental)

Changed / Fixed / Improved:
removed some unused code
made a condition to the translation tool & also for many functions to make them optional in case their modules weren't installed
improved the algorithm of the custom style & cursor functions
taken care of some things that slowed the program: modules optimization, code optimization
fixed some misspellings
made the copy file path work only if you are using a file
improved the advanced option exit function
night mode fixes
improved most of the tools' U.I.
made many small changes to the U.I. to make it more consistent
reformatted the code

Not available yet - but in the code:
* - have a high chance of making it to EgonTE
** - have a medium chance to make it to EgonTE
*** - have a low chance of making it to EgonTE

*  loading screen
*  settings files: your custom options will be automatically saved and used
*  a function that can organize the text better

** main menu

*** hyperlinks
*** auto lists



[ 1.10 - cutting corners - 1/1/23 ]
added a quick submission of content from the dictionary
added copy button to random name generator, translator tools
united 'special files import' to one interface
added more file types for 'file import'
added sort by characters \ words functions (including reversed)
made E.T.E. finally resizable! (and more arranged)
added emoji detection
added Wikipedia tool
added & changed some help tool content
fixed status bar bug
fixed & improved copy/paste/cut functions
changed transparency menu starting value to 100% not transparent
limited the transparency percentage to 90% transparent (instead of 100%)

[ 1.9.9 - virtual keyboard! - 2/12/22 ]
fixed exit function bug
fixed the help menu's name
added virtual keyboard

[ 1.9.8 - dictionary & transparency - 23/11/22 ]
connected the ☒ button to the exit function
transparency options
tools are a little transparent now
made the exit function more efficient
added a dictionary tool

[ 1.9.6 - oop revival - 1/11/22 ]
bug fixes & usage of O.O.P

[ 1.9.4 - option2tools - 24/10/22 ]
an option to sort (numbers) in a descending way
better usage of the sort tool's text widget parameters
added a scrollbar to the sort tool's input
added that the main text widget's (EgonTE) options will now update the sort & translate text widgets as well
Fixed:
the user can grab the height of the window below the default size

[ 1.9.3 - sort & word warp tools & many fixes - 21/10/22 ]
added:
more emphasis on functions
word warp modes options
sort tool
Changed:
made error message(s) Clear
now you can make the y-axis of the window bigger by grabbing it (max 100 pixels more)

Fixed:
a bug when the chosen font size by U.I. is not linking to the chosen font size by keyboard shortcut
fixed the help window by making it not affected by any data type
a bug that when nothing is written, the status bar won't show the line numbers
fixed a bug when some blank line was added out of nowhere
fixed bugs when some content manipulation goes nuts
removed:
wasteful menus' lines that didn't do anything

[ 1.9 - better + advanced settings & find text tools stonks - 14/10/22]
added:
advanced settings
tools - text/file shortcuts
go to tool
help - content & scrollbar additions
added lines counter to the status bar
made Find tool more useful - navigate by marking occurrences
more error handling
time & date key bind a shortcut
selected cursor options work on the translate window
added version number at the program title

Changed:
make messages clear
changed default cursor
changed window size by default and window size when the status bar or file bar is active
simplify find tool conditions
'app colors' will not change also the text color of the text box
bug fixes:
fixed condition so right align "support" can work
double paste bug
clipboard bug

Deleted:
deleted irrelevant comments
deleted that "change style" and also changed the relief

[ 1.8 - all tk fonts & tools polish - 7/10/22 ]
fixed - copy, paste & cut bugs
made some messages clear
made that if you want to generate 25000 characters, a warning will pop up
made that when you enter a calculation, the tool will not close down
made changes for 'special' files to make them less confusing
remake font U.I. - as a result all Tkinter-supported fonts are now available
added help for the confusing features - more explanations will be added in the future
added a few more comments
added better support for right-aligned languages
added a tool to search quickly on the web

[ 1.7 - special file support & text's alignment and color not requiring highlight - 3/10/22 ]
special file support - insert Excel, CVS, JSON, and XML files into your text file.
improved align - if you don't mark something to align, it will automatically choose the line you are at.
improved color -if you don't mark something to change color, it will automatically choose the entire file.

[ 1.6 - find tool remake - 30/9/22 ]
find tool remake

[ 1.5 - better buttons' functionality & fonts finally available - 28/9/22 ]
big improvements in the buttons' functionality
fixed fonts and made them work
error-handling bugs
improved U.I.'s color selection U.I.

[ 1.4 - colorful U.I. - 27/9/22 ]
improved night mode functionality
added the option to choose the U.I.'s colors
improved error-handling calc tool
improved U.I. for the random names tool
improved error handling for font size shortcuts
improved U.I.'s text

[ 1.3 - 26/9/22 ]
added font size shortcuts

[ 1.2 - 23/9/22 ]
added six shortcuts

[ 1.1 - better tools U.I. - 17/9/22 ]
bug fixes
UI/UX improvement for tools

[ 1.0 -  text twisting function & more functionalities - 16/9/22 ]
added functionality that warns for unsaved changes (file)
added fonts
added fun functions that reverse words, reverse characters, join words, lower/upper
added function that generates random characters
!

[ 0.9.9 - 15/9/22]
added replace (text) function

[ 0.9.8 - 14/9/22 ]
added URL shorter tool

[ 0.9.7 - 13/9/22]
improved code writing
added advanced name generator tool
bug fixes

[ 0.9.4 - better code + better open & quit - 12/9/22 ]
optimized imports
improved code writing
improved window placement
improved exit function
added more opening msgs

[ 0.9.3 - 11/9/22]
bug fixes
added space when inserting certain things from tools

[ 0.9.2 - adv random tool & more - 10/9/22 ]
Advanced random numbers tool
added space when inserting certain things from tools
added reference to modulus in calc explanation
made random name root not resizable

[ 0.9.1 - 9/9/22]
U.I. for the random names tool

[ 0.9 - 8/9/22 ]
added translate tool
bug fixes
changed Insert menu name to tool menu

[ 0.8.8 - 7/9/22 ]
added random name tool

[ 0.8.7 - 6/9/22 ]
added an option to change the cursor to the default one

[ 0.8.6 - 6/9/22]
added 3 new tooltip(s)
added four new shortcuts

[ 0.8.4 - 4/9/22 ]
bug fixes
added error handling for - saving a file, changing text colors, calc, random numbers
copy file path function

[ 0.8.3 - 3/9/22 ]
added an operation list for the calculation tool

[ 0.8.2 - 3/9/22 ]
experimented more with the fonts/size

[ 0.8.1 - 2/9/22 ]
added an option to insert a random number
improved calc U.I.

[ 0.8 - 1/9/22 ]
added option to insert datetime

[ 0.7.9 - 1/9/22 ]
optimized imports

[ 0.7.6 - 1/9/22 ]
option to insert a calculation

[ 0.7.4 - 28/8/22 ]
bug fixes
speech-to-text variation of error & goodbye sentences

[ 0.7.3 - 28/8/22 ]
added option to open the respiratory page through the program
added option the tear of the edit menu

[ 0.7.1 - 22/8/22 ]
added file bar - info about the file
bug fixes

[ 0.7 - 21/8/22 ]
bug fixes
optimized imports
improved exit function
improved shortcuts

[ 0.6.8 - 20/8/22 ]
added search function

[ 0.6 - 7/8/22 ]
added advanced speech-to-text
added opening sentences
better exit
added option to hide the status bar & toolbar
improved night mode U.I. & Functionality
changed the status bar position in the bottom middle
!

[ 0.5.9 - 5/8/22 ]
fixed message box for printing files
added a message box for quitting the app

[ 0.5.8 - 5/8/22 ]
fixed imports
fixed text-to-speech icon problems

[ 0.5.7 - 30/7/22 ]
added tooltip(s)

[ 0.5.5 - 30/7/22 ]
added six new shortcuts
bug fixes

[ 0.5.3 - 30/7/22 ]
added custom coordinates for the program when opening it

[ 0.5.2 - 30/7/22 ]
added text to speech
added thread

[ 0.5 - 30/7/22 ]
added custom cursor

[ 0.4.8 - 30/7/22 ]
added use to the status bar

[ 0.4.6 - 29/7/22 ]
night mode improvement

[ 0.4.4 - 29/7/22  ]
added images to the buttons

[ 0.4.1 - 29/7/22  ]
added separator to the color menu

[ 0.4 - 29/7/22  ]
made buttons flat (more modern style)

[ 0.3.8 - 29/7/22  ]
changed font default size
bug fix

[ 0.3.6 - 28/7/22 ]
added one new shortcut

[ 0.3.4 - 28/7/22 ]
Added message box when you attempt to print

[ 0.3.2 - 28/7/22 ]
bug fixes

[ 0.3 (initial commit) - 18/7/22 ]

---------------- BEFORE GITHUB ---------------

[ 0.3 (p0.8) - 18/7/22 ]
added underline
added text alignments
improved night mode with button colors
improved U.I.

[ 0.2.5 (p0.7) - 18/7/22 ]
added underline
added font U.I.

[ 0.2 (median) - text design & more functions - 17/7/22 ]
added bold text
added italics slant
added custom text color
added custom background colors
added custom highlight color
added the option to print a file
added select all function
added clear function
added night mode
added three new shortcuts

[ 0.1 (basic/first version) 15-16/7/22]
have the ability to open & save files
also have two different save functions: save & save as
have the three most basic edit tools: cut, copy & paste
